#include <LEDA/internal/std/math.h>
#include <LEDA/internal/std/assert.h>

#include <LEDA/numbers/real.h>
#include <LEDA/numbers/integer.h>
#include <LEDA/system/basic.h>

using namespace leda;
#if defined(LEDA_STD_IO_HEADERS)
using std::ifstream;
using std::ofstream;
using std::cin;
using std::cout;
using std::endl;
using std::flush;
#endif

#undef LEDA_VECTOR
#define LEDA_VECTOR growing_array

// The following 3 functions are needed for the diamond with large coefficients test.
real OneRootNumber(const integer& a, const integer& b, const integer&c)
{
	return (real(a) + real(b) * sqrt(real(c)));
}

polynomial<real> generatexPol()
{
   array<real> V(9);

   integer a,b,c;

	a = integer("483594607003432820291915100942517794432806734334874692924310914240045151902889454512805341811384058680100013594560563771434203396631538414966570630680072046289542972578818240865535311370481015406886894108883992124419481854005784616018739597396055011532787043580032141501433188626289862679187422308314571294505051201675620546996759952124674791848986107958424945571639756209358122763617666835773952397513127080454604112654146491499411488723224477568855581122183665734837075049880983141844994877204874810156053273495493562306018796496020299893821442255620621650358087694753492010721229542025418236826397684966128334737844471716741109004089536732782985387909757921225691244898904589832249152074737149078071232512914854180902118168227679556330419931147831530740322003073245515090700442628904496029508212241211479019320452135855842968901988538955882995859836001704582068884339105194875766051274854293122573989256269306101872964186385491765771139341162144045238198533628279302211835869050796468580840626448858617219283884293119631337272916640290191571663432754918553892332948009401542766340570407637229543344560809154716269708733436945237009404129671388203364577909655582057687696434798812341167518392702263292262292971824700544310902805524021559036111442972536112435210690297152921703210518257776833823984880146532432575098512166011150245768176528914537592983763338961026712840890792919897912843619429922212259824119425874619276017456784825662576543898064898061678178285154228928401816413250689303312862434465896347775562021268872696864269441435192849469829951232769920562414559054165852259479528906580917020574883290921341697708851017490916499171610749342421750508796422899461634285827772457125690381779001406350760038186461676019503386806691624");
	b = -integer("188633350450369474376352372547292915154533596897299585184180830758879954628254450929366571312428011924515800587710339417419496552555905477422127479989457027829785652996583299581703374799005204909931594010302849763051859231648653018938780189968760415477569117772421256694681764534629463156023504963395794101174594866304165657404391764422738848691274854709806362174401673208877468749846918219250961573604276665574238309724444963692877740309785199056275420802823439376344533367497758431030865475124196158081460081999872202439279708636970462513017965872500763795402916797642302363514068120617787220043886189137847871361820499963534979131271476330891224704901939912108810922121640646646819421062651750941746456628082935364030310960728153470251097431820493268486259807434992691182154091164513691285265211309862138358814576717108501265923946841903571663921590363999192195144472620385445702989911121331613272191484219800067678899744348016090727225560249583019221941782045377519504264551709559703684529483680614170489926017720894898134959325957983974160277291832420009363073064424030397743128136199519366549613466035907456386748900256920123928377634338804229332695504816118603225592579498555029039276638061597141946102941178245348766258380687608665019811674237651023563384212690821260832111459952349207504296698147480255903187895160370669605036123603248342062001006690653202849103932895734181188657626270024443853957021602769201726020144043176788464770282648780314735892331780974387262981380256135505209446202583818566922336632035804905625952927290624055033596441933447691079990561429770783251316361493851259247");
	c = integer("9836065303307912114168449662236638939299375491362354845835773349789255376929967284206612954966263552728782229918348106254141281718875940421458489180500596904383481592377156574383808783555959621039443688265296411821845274987466315140772861586313562898638288405493268867086323264");
   V[0] = OneRootNumber(a,b,c);

	a = -integer("8489605942899985308556039641904549258299041697108709360227662382510913270884226055389654344842805480046034757451009026667447632879604197434344432675519757160402396476266712270171023387036744147945623951362357899411509042312229915298016043236254542540061185011590421832760358881125358971198378221263995161330050680774952371061266876052334975461549703831774729108870056147351683192090481820807337592037013977578910818704060515599895273948188608801075886877885990772541403458397459757578978029194477361785211600118942742922053441188623005217671074953952821993081108487303059799383834191783438618588577998175040046122790538521928321326541502723472942368570532882100030880823991803352013018675657764970144643001622849956324005372296399133903116371232780836881138226022822545362296545407867380943016745040566582096539706053430200369548167149031608036627293075112625538491284523993083962637311952470469892355767653051695128411652156783508183348916161568597550636891267020952021785362748281107441383690398811582905594817816561227170304086246826904188717682159442748545617905952934026329166429499126387164203476520031494417770121556510231556264790226905478866732425846913622501198806744900318923088386577589296368145252471311861908420004696873363172790086798523166732895848560457749339198698438191927597889702447087058293994305120287869977752828691001253652701162490542429998802172690613239132185078076096366359471434233766755771240400709936143825297939242226285377931284816022591871621689934600881140395194086207565663785107429897014124801998633114711246878474257289011704568901517072479748917147011128988023167802504238712771548454777857065497011771171032240588030862588254750644851486629444134921232911903629993948473795986777287696136521444358029180276911911971335323128315308002377349626317533914674077179871251872");
	b = integer("1662908071919631000382274375651687189669241150042173504209186111411523186901931065957123440235015513241231087305867385943052485689272701900788021329864164014725195903635904258993664849408159161958268931431935134744040455111294094327496210429515600044686716180751629394359749985625370962384850262252649670776297316639494342887979344519451419040737896855928938279486502087589502336463293685848148805101609055464526939560023837190630310354432398675979230517760175416185015724398618172825181076335770065289550788273077379517430767492029920923101226827331918798466210383564391680432232206025622851859103496807234594491625205752388174352219828196306316931147810555817294440834786049743680933536989139824748308107694198706515219464144832201407053315080695287788657818024583124529736637583559393105567887435896838619339059254288472348865799822115376138365672293336490399512061267863771831742017364099660930814686204909553632041152958999027946402233822617053125030793226415210788136292894533374830594584523055548630972848313949188291822661942342839544024692139850085103504385410505791144738079527882572752622495989928882697846521897694198773255442019732891474153620530367484793151909798783157860861850260766306007893619689459982351579132507550403518578803710285355431101927596345362504944411712624333664865201409356017539986533428127375799358837871803079300159888192117866794348398584463201581530491970981246066800463695164439548970932497941926305176099527470143467401876494773930753926011309163161300851824356760233577282304468603624564147159339011352475664169185810230305842049384714659823781905730717337957539640949525087266765286360127659049758688751068281096327079456044418116");
	c = integer("9836065303307912114168449662236638939299375491362354845835773349789255376929967284206612954966263552728782229918348106254141281718875940421458489180500596904383481592377156574383808783555959621039443688265296411821845274987466315140772861586313562898638288405493268867086323264");
   V[1] = OneRootNumber(a,b,c);

	a = -integer("107656115381660488866709850221020145711037925144089005935474808547225335962931473423619063521544207338169389650538503106360117928652764035308316671532840190136487041215950719288893164842346386100382410371995443523851331391522817665740011219074784129833472411790363915065862743911898402405379201824888194478461602124511294823362829293802466440276072140111722111684548573347465052016897441359290666736900522662231689186835291776192319010936949909546808694543742788115521918074756084164797555836302216353076514137629518277411678765280216930924736360815988673251552187562866471439385863971607137847170922264825951542431625484695449791903360463197335051602380785554642665855452706695532137008863637999538186093775169681524969982672197642641546934590761016944211693098462631515356722339636449555320311819450839819774006315333957933086291788309469593841084244870793226346420962307024442881421147947319852919305773623289198863485981151758923321447719889241864750556974821713826435867882702056078811047681569441435438182535048740695608959948122345455743841129396363006134034309096274863834173197023037246648371614051522296320333645192698884421026900808548710085063330613325398527913236120558069331929587412453444304387948621025544715987237616049808264500064064364105400870822951449739701847764272421636127861032837724103318532217074814421659027021695965007464998731445982669189548976613537402066617724169865063311965117331252400149714487968765304970509430124583816428984741520435249223777618770383192641427114694954100980853170737738600053669973308157385986724025793620204715722920661248634243012283935377493106194259858578259606265932095013662859649783482705083952066078440415043090530464272884273869877718694772578419612140553620316826217333330620739869488910183664885582043940258709800386486021595710330010022396920520724094240774094678483197702688833204841387210371456251497457805094720");
	b = integer("23170331666545592871813673662306727978663218984601642247483976930592469832530093183420463931890399075921038088730561349266389155626403183113370241165371604308478932821003934288065667148466607999893067476322262157633779334138533668931579325467369697151240733958368511845116354468679539793266007334427430765172740570610560260324921091740013675467926983109751127898505104916490732004059013942997657395890282457009812100414850349659992076057381653484589555685795667484095898867515428292422875937418443239568152595201037660041797303658203842954742854772928124002355351491543634650080276018941650433093470471343721787792613354335700543594376518890746280748040009018042855957791466430726250786649275368324908788158279943211678938055696941648283584850945509406828140780755764890906184254436427479938573376132494823469936206845716799421273731116548660370122584351811265722046750586673809680538922794990607332753433330337922958712268702117062665803294237969826338614912677849318572786296811446146013314520930158099036759219901889489462892458310814294420940278978369886497711951599401065408441319610435859971209447575043228866170123150975926975360193029331379999314188087700753290194715414049458997633393225260810301564905214902291963042905151567083112386419646479520906712066963926823643435745457559286161817268315468021439226833469006985218743297599428269424737888896519854909718611398868809522839632237158514595767916132678227607358333191256756876791083372660356778283050198102348339644446849659724364945381044936775236711797625712263087012263868499689953455929624351767336121330708839115692358813537309249368112053460233576371589768415698131359559738116100923411610219422361581757549672731720097292064473061154406777379344371043445724151315968784160");
	c = integer("9836065303307912114168449662236638939299375491362354845835773349789255376929967284206612954966263552728782229918348106254141281718875940421458489180500596904383481592377156574383808783555959621039443688265296411821845274987466315140772861586313562898638288405493268867086323264");
   V[2] = OneRootNumber(a,b,c);

	a = -integer("310943465734309725091184323726762010215122614130693927397860159368019473751474197021279121158199955486275989074345979627183473975981896560580864410928400594078012029670149470677594168789082861635688649756316000297306134491573942794605958107909277718531972223242952606424409820587341229274278036279425852922195739429158606726774680774894699046068220784556770915584702897515730165189873359519032181989749685690480327405965400263910575893356569797958987204370408372889068205975283600151556976305002451346987082118539085455012001712685366697708436461272982076585176654008045657934518465206244955083976214702423991713099190997789056040032603554695559786654658564774628974530027154222830366098448284125742834688527166667478726840078836109311380972416578373769760976105782942581611067545963987018266280868165628881479093727895319393853159375300273100507528451269484418146609020748525233664022555737085336121293293265803279609182065356562202281840816763890760751220693575382478381128466245468481618149445702255306343180475556756939980519714041080397509621901370511693139391281296652888258459186238950412729600039359625106738393162290056652538233499452646129658299817284337936178391378292833989286990729400200912556600034251816857975759096846594302594972622065978961151942620591888581936188205641820652549439051736143411977212880024244945746387811526216766377632405667545973014661402808271877424466931623348664674160531432550654798366058102337811462274530694184437347279981944815155396456093997483526187256794098765132251482386223492924860724912487916987701801737752598803117889173076091251916265441629918383058504466613023234928610386414707254406424272231564200455172646517952556455733161073135108185072456513946698663060583245885761738559410116828739681720944883605472138285938513225973111334144948144303483228774218046700330546107200959163335583652857163173834685373646224871267431334305542566804331396878021535638771149360833321591955373847886822469734400");
	b = integer("52117662620669599325155838672556675185640667827780645004953350621520487165633150621825968443478197607753206019544699592433547292061428182293796340293618089425458218167519829216138287458162465404003561601130951139600196405163030510553452297329582839572077533274206203767990803978917288730923751855744375807015785164118559909657932520893647312337563914500030191712933147052232231978286330431393750447513647813383767322117478818595599701380433651145199831804306704716634474385469385183012212146558970244512196688599947129478328024504549894342106881883107856310661023537613672906267514387265993205430279289865441831645389858195456451486254650566581226765901351175702312946385072074696582149300519281476110602771855495926922127544000684888573929264725598282520904105179802558561825421443398332061199504700292994916719812951995872565739955117009390215130349809109767358876364332285496198957471141194180591217474558875205798639843013484217575628815504019315340979033535437918683745495976776441220291090281280095932013004739326289079757425834966667847176164344654993238133220242606488979779308781454628558745721832079032833614129023940691252274430465984860800246069980200797218208695174592557397990149624185645193828835493318935225320711216874466490374564879979203741777869238928548486840504956142531472265528900315474905396553044632098906837396815862363629574404156537031592835148394825697380737368950049491002324413536207721601867005684126434846465045884761950207502787891204092728083575183876687160666506482013064297995011920541855117403761182752967716277746492756349283553419896424451177924705321928998827317813149746493086629222313916536167240104430067081331055263594394429539183456568843795843944875755770992303358940316591589836934264591318403692287109611117229978313482282237301718113646200833046857636329203200");
	c = integer("9836065303307912114168449662236638939299375491362354845835773349789255376929967284206612954966263552728782229918348106254141281718875940421458489180500596904383481592377156574383808783555959621039443688265296411821845274987466315140772861586313562898638288405493268867086323264");
   V[3] = OneRootNumber(a,b,c);

	a = integer("334054513560564560214601669571283510199597095033654598844962184339804751220296060325385079701458917647117692714208744879113488729665864516276297607007541658144524789150585032602186913385086736409962646453722249027077933101077125661911668874631120049407403006999748858874812650573732920743087634739531586313924105264953788338650714494237124605317225293898659366911117812875868603169242857638893356387337398626802473941555570452895478829760044834266597470581284845960537858088140480905927617337932406777073627034131044591324765929720419111805642364212421688389177281048520445305946008690717144703363330013685177158129258412154187875734892151572523023287028840553652181162768699027772768692825651976108459212553369688423451627003712578463316297434105108342707358740968638926071192864320090645743128997913875640918116499205268095343767542577380870058134944144941545337958391425612872993980278952762206191574001412961702025265592267852431863161884876387653101669724757071540675182106197330641778916307370454895669267521830155862554430627342717018151749498841282696883583256389718791414035876681382529034201236469672427409560157627385414621876638409083881059178780981511833527735705759867806214464086198150891600997476670946797306980737529515633605924245685662377477130273122137569413454686054457443281791613018861954561952807530581522609150111078778088665510118270960435540540825872368479956821862606378642494247245576261686294867197360421080206661899027648886368511702677115010417761484184572182074922944568481480732452667539212419764514640389463772965679344377706075430189771007740706460460829803432574563626554141954551434675644992873198916057973288363920984612298973897645917240240519073623960265667938512499347628452560048657945857628112964720298967035694207648988271912137756906772544055666465383783532756848029286321671306086889193475678553057635643317860612504797195822196858918159469120560788858440221977597876678931157979188663161817801679093355645537210133753822481020629750650938156890821826995767800760023376000");
	b = -integer("124617549318073924061190537083802939515084829208359663151875577020161777071577948420882182466305288561594185687019565103624892358060312108888521916187474591524899263268355766946083107826216923391849999784499796666678238440826510412923043111757220030439080368163442395359864778997256517737994283060769143235472127073379871070057772739528175186069538475707867329746826298024235241440478191231163846897905324912891366155539740524311203641191282658807520777015480255756858202482835616211286429896210291607157515771740672806505361092747158723910447676107092296283300057735529556517486116654981734154344853012604771250781413917879332645723854908576932974902152039281055047811337282848148332422962646426000346921420982569136432282539413273212867644208547811197178172757656999737636729458524837872066690408094053838156772923023533885777962154611880638853447218299605700526807321874301018342365017182637264639654323640090518324937735275117475124999978291355660047519663746061267169528898352755625727295114439713402988598862387147180368513395554155179223673637015505099515316562164302408437837602648804852277177650875131809634600435341720707181981431447991260543781664752330744628582195995336404084474597415483081524219822328840174872182134445542411322045216967863275367332099856242586698971000559622637349078965673169175879848406739523257565210254413931035524495835814915164157338507237314154939783225051653999591711847827095070484421958941230072170436714195189554911535505039693830463681781543891117659966560276814652972636213608167763817303808007708232732439994867282104048675067542116675893555656110848400392034980613622562039361743436760154474223943120840178437153197452527376985712684232298056332684039009031763475923395443028615957715693529054511149537463461831590061430754371596419782613162854606952618077201529668063110833296632111123122508886127827054219449887300871256001551378000");
	c = integer("9836065303307912114168449662236638939299375491362354845835773349789255376929967284206612954966263552728782229918348106254141281718875940421458489180500596904383481592377156574383808783555959621039443688265296411821845274987466315140772861586313562898638288405493268867086323264");
   V[4] = OneRootNumber(a,b,c);

	a = integer("35250086205642317873998854296880090251946369319883379846503820645471949552540962322371343817090692026489928760559401962414030192201573509116301622409173198938286975144109106829014640798304065737631789509724570424466282976922142790775435956024354904743231392821913699805113446143064321082487883393492005106191613656612228170042878696809264419056484073466611675998187607612889816835028163695205423816401075272631897615043040314346199635434074414701586306216163061885799510926433143177919397635010131656735529159887623408583817082843984357664001767201382057979137223863204055278215238565054672413741081234934361990188889890498275872806954328843623232345243986177586724762623077330232840171371214696201257032198392213307248697518095706126362532410745180165908326506276551388552934512906001951901519118385427956384818528748152482025913037482293996730730994112807714338138702878935997287424432117361265487728490310357519097163298904557196160683164416282224005443953404208906164437442019133846929801252706350301280528168621776870057587782691654410457453055108753193645494429636629024673967760849878418480595352594238234158608487087204561186772805623737116188543888319601949921591244545200576186743408961106366900425055080949810781842851455821353054672486613280320799728015146469894498208200617233671477848143327902891409495561187222737440221498962575773304855530073400919787962216125081144020116091431067651486238355712399974563264788260028499208001643189788634651245178404859500942401603870967173266335301117035277221271448918554656446066319239039003718413101386380403391826800413100381214913163908085166000349569373685604667630047696412366161845140917677560858104640460829528563805394473645795269064419860366939781271209538734570922774459248691849079028184413921091406499801024277928216137332525593427261329055723800483336707015232114094811307015185637815863184159774653689965430112980496243482479458"
                    "35113923538093170070404442232224482163418575480327336750248142538684857920026809155438485191147086560770796043180912177838619889803402032769531732446734321286903791980326743213485405921551680000");
	b = -integer("663120742134172665265704299941604248666639845993674495534263298141122981212277039668743342194072589596385428324683852917210413540078199492587474891641334435159378389602802941466054266962003670333372873725810953885570250848006938442392824584957236199449492981862949131324192675195483217714619324917350525542981097595502443075500490728814106717738450109770528596984294445279590129790836210229750506117311357138640175364578518796802834700403045179564578490267745900165502590715351121832022476808424171584453180447271059621141872498022044383419290667710103365405929858269244858408023256223894425664015826361525789660480497458404060171232602966388232882836909452373489870193498485129251153444022649577728335055650019471335863489076793968246620457272168909932793338925071266535097972205360283249040566070595790097779102178479999317648473066314834319326894630691047971031631806241653193660111981035424131867897317846255976257306278071254516730100036721648108111489618685922499173488025654634571832331091774454917926436694870269302551252963734712214811604090809393132907606817653322047580412982769056959955571414271612155871350548030540995825523922325853620377624885731651707825448475758841143160970303972730215172262937264826499969505117667750299994555236605215353693531424055428686239023011519545013402972270892900941936124677421545062571403905149048017927663151944749406140453636766279088965841539310854155354355239683531517140102493699675430379641751079233555909107724946634778962620303754885454971516752511824239745793210438713268964372603566352434324386940629696883519293247783023685391782087186612472051503998902780566147393201231598278756113545283670827101594897070163515055900457738849837954433449725368523258823652586391253093964542302270255249252582781828097166723368175793544438630014993771388702817473301225527600234778923878394581426852181598683997084607515126993102548832138691340065467290146131210201070238283912436878021537052191355180040000");
	c = integer("9836065303307912114168449662236638939299375491362354845835773349789255376929967284206612954966263552728782229918348106254141281718875940421458489180500596904383481592377156574383808783555959621039443688265296411821845274987466315140772861586313562898638288405493268867086323264");
   V[5] = OneRootNumber(a,b,c);

	a = integer("7469903650533964790486810486596736473618433327152220922467104964742301428223356345992711267425714504862306000443680476789029300504457794884612068635995721755748636334169857976322284718772929281458958788781679566433194162839894680850991727471572634694855659094591185965111240637131895013225365573957387488710081382428469673609259057323727866276509059551737733573361287479695301435719357999537550434269324065014239054631846771926318633359137785738355659178845993790724557902376913006768165375435425893324929928671380561711803148687302120998866958381813319589191838375866617131128260717204537584884315824501295590745040191586979569573554136553135769908554481544647898258240437406454783032824528692036596590001215168062146610384483853525356326408622136550965332501862897463044457061635811319359141013629280870446985952454545960837091052825121334104151311925437556660586851280022482064758982615028655418013548872834495584330335263534517694441136751569883350890345304121125549524336565859534807130397681697804308566083298305242503411103240611488647103584157285370964449868699886871764996548062707614234045091128990605024892459670633580949855502266687666181345227722145918021777767775456617728765352968829248386604734871559721676460695627975355270746469400471130870349569186209099983292756576156237638714630333602221305927092613007458003494230848078816586212766048648956216729884784098837005647738322592181081711260086563816637658399455963259078454256870110011174882685598430598704296989753349323559964506205775633298069549872540662650755489133157576790546338770737650279682199869280341772691041023410316286629932047351186605619251685756586690838880226673112451104006122338184544700553082015025593526824353294828848266049231734381687971981653032456995797413514739000898386494012794062625800320461330831317249650282787052911945528550251170330553442112661073618349150552264513987062934676516985254533032955167833797918540245868015833396857035"
                    "347884540810944981594404459674600379123874883267354533459503902031434204669045913047005599287863405548830782303697816776223421518319219688090886056516667117964982745136982198133228634443609206943082241194477874448476588800000");
	b = -integer("943085388279494150157495676609374777311701069567571851533661519889188401999983009061539225808518898593195398942536365737202220606467310935383546139676417138015333821491950615884960981745948014800646877440164327513605727905005932457003713749198308183313573966145461675262095872179421426744421324856364429450855094171508403940254431853709738081766129676763348109844081567729883625309141128136922669547268395520172525365059160024654131830187609000269037592898142744101596049607159073369420950969518025571178784505862479552036054273839142573475128959876100667355931884952228021804070485095531417635090909210713604877618815591163700062339320805653911118136547905218620390561223156582326114771397397634947488921558004001255240261351393394025906598606877420771545262818982609678198637568580675485323974256762591273635032610706680475116306554709959703034968673638181227232985983872427436533751584949198906359907720119415520752240322537605594110909360086912187126158780668283293197407119098352351428620527625207717447889204108651827525801695228866021986118815284355895611122328788706594683000015031726204982740500154140491287079882505284541070196615300808142433170983514551922700743444726350505661872977407961209859394378162180617650199680613813556315333339925553493191048658394676063108254061216848861933986424638854846977762889473998691441232350456264565582039526237959070871525334312168616541582851411193525506345031700772823968070640297652881749621310643996758152031372190154740197620894391631262935296978449332934729944909570951515370616299919830605813121797118909254011102806299929812339920113448776158487097170669314500177245545690774361070342628555124770584252150920048373428174081123503237334048649109437280116729608138703548234770743655790750993412726084096777427657815969249250593441225508177244778793972890713325352103778823957155697862423841910727601807074789663315314435907292296926162978543696938711573355178445310606791644880624413157343315595426505289659921021078409742238122645688820813973524994947774066400000");
	c = integer("9836065303307912114168449662236638939299375491362354845835773349789255376929967284206612954966263552728782229918348106254141281718875940421458489180500596904383481592377156574383808783555959621039443688265296411821845274987466315140772861586313562898638288405493268867086323264");
   V[6] = OneRootNumber(a,b,c);

	a = integer("67949342556830685174080290017508340789361228835163979661214406216950457941724382780865731741201359661063242861712760777579172526474833947304774733388523492222658708962897593712130973792317978407210196611270698243619932856196482558848651875619812658035151845305094217555329179905389594250393017827358113666982561423797816414337954285060363409553977181531540239197530080572169492215069945856129493177249436199784466895019851790090778800987537300193007393212339863047501247978742409130960085622643707098655312139117760689784907970720909979461770230220452565291289587811144470688884270079327499502160463601137706469684903518578485711579117457373297292823635206581055728852592056270843088628432846310249730967732562269048324719731210966048176707597369856416586498249870872834686453811361013099988356728728892390637515883146243794924199759124752807693396390928456187132683754986734217906525241066479041678485748086034584445028049791761749683223668401707232341315180565099927744341807972564599762456376418039194794340491878213867546203418645462806897390629718061078482588463661618087138450704223034944202373590001071535371297653821094077424081436890142268146038789645283796857810452696812971150364509396012922390209383816577915317641705459203705223143309820969304592238990323354428901562467691476015824444174832038432954142779928834218334680306205960488090116505883963709358165959806536234831385448521432490962212180347682528656878171689273950063766136669709448183731913409728299288791916776636703017402160793261260235690596368808562047203018553061280952562123547810525679098395475324109115941982760740535192111359066357929623693870801898398609360135339786761184347400602275344876096946403892280084075616318119006153044018029996001920063194732824088930758670477562537422051656937152453064869474373759546710099745721667699121756307609321646111019529511043387167700860174301872478113512649746659580686930873212710488652966511933424143203560807794700770690179800342"
                    "04637746015319753896700652729703625883044911392983510824226632603282046055863932963439720231034981952581388444407244212327916995468129085824990974752838847229568140323823867461222322771390689647268105832746620909616872323671864335416197905583512170732020571418375040000000");
	b = -integer("453972595834625219473195666374692818622556041107546225452025394491087367969625669178191254510280641353415625058802725906584696831590060136940600249088650956014573375337591424971672016336521322000406596696994460356298156379232077293711057199896545021842596656310237050598121309528733988624197565637378277181446759017667433689080312970049752847438186439426820134656511481753753917453023766752567291718781253281713046339504393050279320168016517750641231142220030546833979847943817426853414550426397570823425473940859982519158772340500817431846459507446377533053030659613482834466553116782268892748197755672119346800900790045203190910405093672523076282714031474479938726833965358216919565108215506205254026655511604727698318178549865423587196157933014402835210088537923427236275655351996156225448810845158929737074313995940026941853848892244889093097467556231779017011542265324429827820417917691834797137040519079555673604945375953808652273800149841190502394556501751427592687942654235285036277670455862561569982064718512214510156532926525709215022923346980096141497376068253631687300408235239582811470878099055033039598490556152706273923031231909091503532042146761867034888071622410227083659313900843257228313231476660566752048828272409303295399766157475590092828892904959520636136275695485789158793281182133366308340922986760393509367542596879130169651633904043458495984427918238425483330793119871513309109428369735661752783804183622642646931883415238220079264484382825417225312788035986285193358174749391343967333198077877530027890709032821519673151336965740685147685958161232616385130593184989758405951428927076085596995893797468997035161743351499895120490110738034772906277729575226732730625369642534951525390478769591640395387904998234986051096771241046018852748570370247872416176881967266570139608919124581693426626083276555812537908351930748441029974747858689447624942234375925293903672150812100607927467752265359246525902816840850631439482709244"
                     "115401237100589269602353293376815525896117297179739871676349205234989618024397090442061568456379856484230894613557441235918122963120000000");
	c = integer("9836065303307912114168449662236638939299375491362354845835773349789255376929967284206612954966263552728782229918348106254141281718875940421458489180500596904383481592377156574383808783555959621039443688265296411821845274987466315140772861586313562898638288405493268867086323264");
   V[7] = OneRootNumber(a,b,c);

	a = integer("2296858249993113130358158146012707640969104807092765704463365125935737670247163104134831186826603551589639108549419294529701029608633588551120941697497586010415483048736141298648976174414389621752592816938099501660129777927444867244974822285803637770893393686283553762830909434253772854654842696723077026814695852013137813477351949943644178033473950895072678637007457548579967833163201861011681315518865850775469806784466255874161923864239988980790924006865148148978814194550035989049474716594482836107232643537010758638493405113198843842143599549258390698219661891168531724730899884490996312591889552504580402084105607335417654035748441880529028383330006866287220040919893478759354758290471387964847199541882872050450389748809816084061653800786226200657501208418003497331367318185657684226350978390089437188169718702595062004542244193898785134869876629806226085633719633521660892655010655657374006160906603512512777308926026710480004665058462223130023978120856624733302910165698722197997180262903300050050786936674222070490801299519737060746036119671901484752380909246737925083640872045494100162351285390633541014102574856332515167377169009627798710466538941551277122095306900945080118133680852862697493578178864383658504603779589689763834234293529447581608312777399598924090831687405171048541229814869049025835246545806915580383150025038550016964106075620048459507566325805169619152944470474746765677197076370264637084966305350374676677543849089703107385314344837516194060816348536658572873620832019567268140927605761138745145450526158315414844278392106618688235587835911565198180741111715861257150679988534397717598764870247673783121427840697035338790827039256460692026196597509568787510808863361948069098099094237945150015742194776489869450200559951039940985875359270006106032958763059490887737257949544097210305110768973257146208340253580870549672079805951611746752040317408664894612711073545946849620703209702269478162773373323803545039757274925374850"
                    "839377791031222985651752661896823746087924772050069046445364118269315863523919769176228930410804016119594475336170729246072962393202990799940672741705291238489827253872489598930542820503408749110604625397069889124899541919477324628416290925419344579228442138987404255507079155594563007328923787358773285945593539093603029405739520000000000");
	V[8] = OneRootNumber(a,0,c);
   //V[8] = real(a);

   return polynomial<real>(V);
}
   
polynomial<real> generateDelta()
{
   array<real> V(5);

   integer a,b,c;
   
a = integer("6216388486922430834605502109616446740466972272430485697467844361159181654139750480472079890146234702906748049577769148578019258394659624689067454746586956802950661461431433544422689148638065766367721058986674190219657626756288837096949675612988232537350264148209971316998107774707052823434651571247876210571623772697746056907232239772610969619811797287520131945249131374912910951653475420103406307053948721853354563611505690936497962407815474377010578550583020532407708844576579920001509966519737255183961974532836815987997534228596055673856847753003947951173272925545547059199897814688003061068779823864728609182112142978433314869292975801198223606054713177842384633689926536682435539055057762559845055217550240534387803755043938090968605690393749317813380563297676732238312932119262206527117157028595303987668728441313897638242064226336459154680055261833517112312011885920000935216527815600334300721290792999197895970751490024643409806224699739102750527799357341126508434111180311626857616715157546744305772845510490033750016000");
b = -integer("1163359579182509732773242034141788149844887082056508334747941089465753718532852228987242717633959398388848313441220705370661435717130849106285394382167019536591020713398887077662065447316731699153717694260154720537202942446167825985333230699974661753912095877687559406821693427069042700386038825841976889151257077361768915759064418414510452906548524091643118590638120015908672760401537384803597031557077438715997736887451145184962646184920345605432773144016438937378436069523267143287589344612477255826758972412708726163143839989075775808248125696189775317951515548759799452791550000464552713226861565209595771705882813222766695770041898007390696871000077787431138939617408574087898269120785518472366423092663145842230198135969203874913275329089174202567903798515675640737347439242494957700753954009520864145209681312023875981010890821720033761296162111626447021193126610150110255176122368000");
c = integer("9836065303307912114168449662236638939299375491362354845835773349789255376929967284206612954966263552728782229918348106254141281718875940421458489180500596904383481592377156574383808783555959621039443688265296411821845274987466315140772861586313562898638288405493268867086323264");
   V[0] = OneRootNumber(a,b,c);
	  
a = integer("65373358010618282063995022045061984299947917625024889217957463808502620528379097685953188220262060336085776551992863188236345218535049891379582154301307840455096702896237999269418482307561490279664006544053089288424405440212475522444378909650603177651666833484265933307365544848027596082483003397951044888779895999055029084904789377298596867590426180703128067381003780422283314914801785822409743311129304983831161451194467239501808940487552576801338919694643934902691057635539654567525804880551573842954523987081948231485709491577501701430158768761934894373111192644612035500019476623175205290957324155990479092487764272442230325871173357233676294029396659973542572036148217004226169824022347719952194995467319670400760624912101913493649965986580854468244002452987743154874774497774000721072641561362575890927055806119150957841538453829110621667783324703491451702021491629098148438334592099403550301407244794766411122031398917874442010578375108696028776314017242734742400582220880607491806423680181435845684898969515873191306393517990562137813380812042608900518437397362707520900530846276071718912000");
b = -integer("10579513504128358487571777640437909132639795686073070304735719189307128104071914722141546213515618664955166186896817778926228818149786656426874117137298625084444144411888307688512812487983928249459023660793457038591750579820976313615626850437740106458637640563476631908332110513152350598761409605939238451848802307293346970724838736760237354562990091724519784825703033981880088679513061757071249177484792419694010152785793756472464360292375372678486955682300958795107574233735276088293041082797224071384492653952568469067564501636434515612570699893501668882493925240303004287327093845935407411294535732764402670122694351036194893215374878051699666182754261805009382645822584201163861254732390133168317192639555305857231492883250756058443199161250008766227087675570717129355152262959732773181483306408693438727694266274473783946929712028394862432202743081216736749017044892569229790853735481827369260488020896441258582081487779131485770013820995410570156507136000");
c = integer("9836065303307912114168449662236638939299375491362354845835773349789255376929967284206612954966263552728782229918348106254141281718875940421458489180500596904383481592377156574383808783555959621039443688265296411821845274987466315140772861586313562898638288405493268867086323264");
   V[1] = OneRootNumber(a,b,c);

a = integer("244635287135158833692353012036880554613295222629324895270169641732213940462566581618859429520022978562878718547415475040713882188789106383375967204299566682611846429944245825085340583581768225079281359576325457619135148997112069105360141799532277537005410654497960406981767860944354856011644176208158899541411156231788503173430031719042860706364569332989269093894045367552038453549594883628673964459112530043140719770681920861617696969417846425776561712307393618775003116697821775835055725748194638943756621628736081357274734155854579464551042935773626142058080686695514549493746983298525186821506264517152459383101521660874775823984124534014546883275423418515570986414514878600111413734223369332632016053346237534959449800979389157913456625426924352845151570750125875023419375299369983790935091667675464595747856746299051375258878621144729273426985461406768814935720549235457382116747353374038779803325097220655785179480387382073287428613374477666907554633695054271276827032006494967657381756931541830668685849629007514358750077689017005659970210081084004111369687580462295955122992504810514851985913695463585058364252677190798885166881855538742278853511038194155520000");
b = -integer("29767605301587441597700009473617449197181800369402498315145842079031137135092176961690200550292072936765221764024326743280778231270984758467065939657128973918196545097965629718420368328836325233285327921359302672347061008412839831021950441150787779642674622497286524520876299387355731425425268579658666351753102925896968079620237059654729259299066507594125782153061298724122931836179122870446934573241240644952724977871826464989894330734510155564430513194150787352010034102321747536244962401580762764844112876010454933242154469369426562593926286016001966526357992682348912747392717947896975583766760945054295360052783803010633012818049076572008332652895106045609042635290888269506951916549056701658633435900429138008742479870243214082804096164494875265107169927645359879825937355617369487824566709747611704201418837172921470623164327939349086714288727925991913115765926210636455520860559810323378090173315890926228086460550185320906127053698973053779970194968216488529336874892942968088847501165335934158217925145444032513310720000");
c = integer("9836065303307912114168449662236638939299375491362354845835773349789255376929967284206612954966263552728782229918348106254141281718875940421458489180500596904383481592377156574383808783555959621039443688265296411821845274987466315140772861586313562898638288405493268867086323264");
   V[2] = OneRootNumber(a,b,c);

a = integer("329373236761476658693007374146332649218934526773321292924215807003326077585708039684116939111046787219699807372014643140826670646452596855156579823834207672123276618845228352944419570504792393997959923168544229776792223717073756885688990711485842412430952549650593179096894006008079507166541931052249707593328738410813516920513729870247854572536549835733550527369452110890316427386859535724896590517946859214985404990930079787961229743495790225251061981472320234059375802704894015539162052140831934921495687167104421755433506039986798878178544085812597374385240921098636167462623486900857528414376025930438078720955241021790773818260872110293899915396392508666000269761289990727459591912549192410376568634639372560214558845090760241531695147024472215730859210121648859107172241039000193427556511302090586567272732010568235924231534624761004791927502580812644582031083515264156105007064057066336985046408052995872729830973098318407117167946392090916057169971831690687396841594402586534263720301181414671732393825164041042875267817166222929366737864949245816097278230460387406425409734056258627304816134242935941795838585652659912013986091786618555997420830558932658292320325761490153275482019756272083945057841058679019381958409579397120000");
b = -integer("36671732192961887689601555863078419157682051722870203703082422912746778678554362492696357879770175971017596935693915037900845091488986710744012306966919135573224501552489672257773034874595126629515089195313599523639360821028722516311457998862178195848047952678898879073130406294367146039484802091828012398267054085083978294359324622084413890497953988026244865974439044247734551249217019065304235591872923134345868990117765759617518195153389680454743626265159972186702348780557846799295777704419550513870969656791983860907366709454156577334154993218398949346350564903050318549898127855045226005902787887690717156749318204319712113033336628392093791897665462365194941346088517816430135609572311529603064907969768507213589906696960874019543671012874400149088907314289844737027946959133911749830646164536148607346697737493925034271367619876160005655883724685179542743812265481102886292756597064639900272952102557564898333296772489066921139897991710723209456388934264777057559225551633894636628664095432675138168858659473042104297993071297604651214242722584530895593652593229236951736992963064616714240000");
c = integer("9836065303307912114168449662236638939299375491362354845835773349789255376929967284206612954966263552728782229918348106254141281718875940421458489180500596904383481592377156574383808783555959621039443688265296411821845274987466315140772861586313562898638288405493268867086323264");
   V[3] = OneRootNumber(a,b,c);

a = integer("135635867614227918942889961738799115124224297252836033820647564245647518144411939322960851079619087646553298654194629134498243483785014571876768684491448896767188843601398751748222136584361248303066953489937823088700663800777767400663460983090597147625194163736386067651849378446895442384341803129181471123588685457990459348900374214924851304910123661653525287049567145946869829854873050856538294125186706638304698166890967259665549707192316029966090259215841050313930499803283631981524054022373582776690646413591768520279822948814633604871192699844268018509236462015848412997494500851182058750386236527336761888309662973847315313627437917587439281475232454368405378889449765312528503376977404307499039161106172773343135028542809928608763929385782052638088922448668490247990039267077769717374964414910030529914176029526742047199687745743314801258525670908068565028290984095401402727912277531698248562370893641962565448059431783443888568071914096992842377270787688389233276755615584336228351006271698527910173582791414315381869205063075907179368006623826062355375345818240191079211465637278826892374648053635142233178579355893723130063295694850262520842422846030259847634141707098901454271858796489701992185344811639320606255945180352674853677347551301908208243710411313648212405540521595678317166586757120000");
b = -integer("15925054162771337101124266901022615919039690146155134429381118874726700458426151964705644673715952097315443570861469106892852344670803054483808583094360297594454941438008712427869393434548278101472881295439628111255390003346653234895183491509239556003796361042221853568195234453649537448956236800948606427513700099163084710684830085797997862921217580349009292014348334874917417455035223984831956366151912491934078810830495692418790884290675866233123723501089566194488515178615784554671745001976105969102625174730562146352304009151364352992023756407009827965380810517529487950252201779427618295441443745145591709877388944611771246830223120568570227286522039326088338193919368086378739494561105985947965913976220423541224631485080793853265775605989327673055810469238210135199368131532912041982909453251884810760581305370124925904714254366704179808434002521945574173433193771585569828758406532658689260166476934244278290282611466983876725976770112985260381937933958978654417776957597325696123966304644262558190366560219895382203068989442941196771002764260052167845810617602800191283412521855406676901905271721074143379549391132775178973509849955916605322123559452016640000");
c = integer("9836065303307912114168449662236638939299375491362354845835773349789255376929967284206612954966263552728782229918348106254141281718875940421458489180500596904383481592377156574383808783555959621039443688265296411821845274987466315140772861586313562898638288405493268867086323264");
   V[4] = OneRootNumber(a,b,c);

   return polynomial<real>(V);
}

polynomial<real> getFirstPolynomial()
{
   array<real> V(4);

   integer a,b,c;
   
   a = -integer("12378930442596416786021664366576072437953936482175258594447961894673284526228766195517709193249787477115390466485695981091042306760244403818862360932045116264651293408438854083424695808267587016136887318273888458140197558374787064830973598601744103758615315223466588892107885607670");
   b = -integer("15453445052886613034706330882107840141451554546716137943264099898023853216548962453167738556724728825431194492554451992296619466143891779279104430440599579493349846089855369241");
   c = integer("643302438689756040474522480696933847996893589923510883598001734920030816012547447592129969002415580277249465571226522238376206741602961096728177692188649939343731946282937206179297689514295865031146835324735300");
   V[0] = OneRootNumber(a,b,c);

	a = -integer("51069755212625969017649816587689039733376322929439122308922987143809359927266472318017651919722937934660467056961335650466589028649423905014918776732392069922791030257237465257678817982873256400069837194889222408511800675159275801966801571260446467943917615428755491558822811957089710483890798741132570800405008952910545316249698850");
   b = -integer("65473272616616074119951781477681114106454307030549876951923766352014041826390774173393988898412283624851138324164400863833680646621048774029085191115196486559351199226409309438881065166365076591933009082235543153396675817137005");
   c = integer("643302438689756040474522480696933847996893589923510883598001734920030816012547447592129969002415580277249465571226522238376206741602961096728177692188649939343731946282937206179297689514295865031146835324735300");
   V[1] = OneRootNumber(a,b,c);

   a = integer("63779148737159176149378883954365681634841860530135424281976484144459640940124679208360126077806512420094280757211720563151495079013380510736111425633273223844856540320623273201228823160386728489021451504275494127820155248416177431241763607361521670508115115879040066586381958307895881638964052208001144166735628922733632152482279073895417787591653811697655196393253805098041976095500");
   	b = integer("159641976067135928966632298658589485970649856613119778316601851102253611621131550366966832428169675419210937619959674495225268299250255878531982624988347831581317960158875798132163369112437928757541494839292646342335453196095873287519403528346778007409311401618058010145830760500");
    c = integer("643302438689756040474522480696933847996893589923510883598001734920030816012547447592129969002415580277249465571226522238376206741602961096728177692188649939343731946282937206179297689514295865031146835324735300");
    V[2] = OneRootNumber(a,b,c);

   	a = integer("596357427594753413930988179027277437768733373684318956228618578506090826094414970240525839448516921451137427385335364361308938050426263808705510079495594220610354106888155668052671021454671206054773041420382933716430907859478556091665159512914453857527932261775364400089491546012502918148920576824642720540979559133327729075003338003234125212014747925747033852266136250945060117680591193902137295436870796316977513703986174104462265000");
    b = integer("0");
	c = integer("643302438689756040474522480696933847996893589923510883598001734920030816012547447592129969002415580277249465571226522238376206741602961096728177692188649939343731946282937206179297689514295865031146835324735300");
	V[3] = OneRootNumber(a,b,c);

return polynomial<real>(V);

}

real getFirstExample(polynomial<real> poly)
{
	integer Nenner = integer("47890485652059026823698344598447161988085597568237568");
	rational l = rational(-11, Nenner);
	Nenner = integer("23945242826029513411849172299223580994042798784118784");
	rational r = rational(-5,Nenner);

	return diamond(l,r,poly);
}
    

polynomial<polynomial<real> > getFirstCurve()
{
   array<real> V(3);
   integer a,b,c;
   array<polynomial<real> > P(3);
   
   a = integer("37771265704630252360435098562581515327141167764386946701247402637349389295880105717586958531451109982383420879844018869771409107013807916928459738737743748979341845868773839553598901365614479960934164433897181968390213837678287326635609578432545649233334299931735475442610098774781831700595316331973083212844956886835649808151767141773493568242820226633797473092256278355144566459965139920000");
   b = integer("46112541214805711009886809266669971427904727899340261396928479464230627534552682210211330721150356955821757197481592240313314537857994600036601048670138170984132166542107741816162929745455439021546390620146188694833960645827326175924160298633399757575986349581563484768056109906074440000");
   c = integer("643302438689756040474522480696933847996893589923510883598001734920030816012547447592129969002415580277249465571226522238376206741602961096728177692188649939343731946282937206179297689514295865031146835324735300");
   V[0] = OneRootNumber(a,b,c);

	a = integer("2833061724980945121522913866161791860392250865335641386411198686973900254090871168454004601432825990064633429354091907983956770816819615179061677097984068081928035716673849239557641252618239887918424813374364819473146092272332834673356798047777556991456313288748393716140154446877238860200651970944903535385088879587239665576919233267488000");
	b = integer("4159795494385112685266940090621012110476663800533209277762240140742543597127419222907516532202780295674259186265074370667289200126897479914988125217194373300487002997094148182685858329273524925915441817226605835050913716017893820528000");
	c = integer("643302438689756040474522480696933847996893589923510883598001734920030816012547447592129969002415580277249465571226522238376206741602961096728177692188649939343731946282937206179297689514295865031146835324735300");
	V[1] = OneRootNumber(a,b,c);

	a = integer("86898048707493729471725548898276909389083409918824831313001203880092020797737850922113002202490593706046848408156099498860759722410220591201133665620837285476501466561230186501271250371932577439028707085756351310390007270608387142540999027366535127134506551342510218059532612106846624000");
	b = 0;
    c = integer("643302438689756040474522480696933847996893589923510883598001734920030816012547447592129969002415580277249465571226522238376206741602961096728177692188649939343731946282937206179297689514295865031146835324735300");
    V[2]= OneRootNumber(a,b,c);

	P[0] = polynomial<real>(V);

	a = integer("51478797476272344755508438235680126099311725008387953563058783295648330848606481675894510744743989260580082331548578279260465275505723186363579887854217008188797654492607896967837499742455025618649082703090259053786364153149967308124369072674143823471400690868023033180691441901578597894348620656857496658861843543852597857113030698700439625180338731188580826654392174621227227130905081488182782191021362392806026024456617593835973822609600000");
	b = integer("52680619910249291751005932854615568744997613725085749877936499765792362205621759246591312574195711410497395301649566900842428074341243189496435876658232687856079088081672642536640703389997545421055448446772873107600067743511801443460271605848448351737928105113018326604000891649405489271556830280784821613543959348820661766867027005600000");
	c = integer("643302438689756040474522480696933847996893589923510883598001734920030816012547447592129969002415580277249465571226522238376206741602961096728177692188649939343731946282937206179297689514295865031146835324735300");
	V[0] = OneRootNumber(a,b,c);
	
	a = integer("15104890449660915246740907777632995344955541271063782741163621822328517927609372260742485890599500423597887146459146512578059538656545709500875853037219466759208460468957749179188204162338095953509706573319922361534791455817978923085702636149894195916154227946604379085855711565554887679788388604577142668400703896471386056613120284402087063992474674317467118106653216877360434469088103040000");
    b = 0;
	c = integer("643302438689756040474522480696933847996893589923510883598001734920030816012547447592129969002415580277249465571226522238376206741602961096728177692188649939343731946282937206179297689514295865031146835324735300");
	V[1]= OneRootNumber(a,b,c);

	a = -integer("2833061724980945121522913866161791860392250865335641386411198686973900254090871168454004601432825990064633429354091907983956770816819615179061677097984068081928035716673849239557641252618239887918424813374364819473146092272332834673356798047777556991456313288748393716140154446877238860200651970944903535385088879587239665576919233267488000");
	b = integer("4159795494385112685266940090621012110476663800533209277762240140742543597127419222907516532202780295674259186265074370667289200126897479914988125217194373300487002997094148182685858329273524925915441817226605835050913716017893820528000");
	c = integer("643302438689756040474522480696933847996893589923510883598001734920030816012547447592129969002415580277249465571226522238376206741602961096728177692188649939343731946282937206179297689514295865031146835324735300");
	V[2] = OneRootNumber(a,b,c);

	P[1]= polynomial<real>(V);

	a = -integer("295158511094405801390456423568428761355018312952634971392069232711787727955016647255458748330681528187981762072592328986891001960251427696936770875503707554968944610403848416147357481232224873236793124431895729828443078997662716349467934440271381008536118959172428772401022276714341410369121956289258509693170316237811462146691636770477130245044786729721391412178967355669879469314066825692675696201017978539549697958692576083456553455337618383745317125440828942206091439439855194666068336000000");
	b = 0;
	V[0] = OneRootNumber(a,b,c);

	a = -integer("51478797476272344755508438235680126099311725008387953563058783295648330848606481675894510744743989260580082331548578279260465275505723186363579887854217008188797654492607896967837499742455025618649082703090259053786364153149967308124369072674143823471400690868023033180691441901578597894348620656857496658861843543852597857113030698700439625180338731188580826654392174621227227130905081488182782191021362392806026024456617593835973822609600000");
	b = integer("52680619910249291751005932854615568744997613725085749877936499765792362205621759246591312574195711410497395301649566900842428074341243189496435876658232687856079088081672642536640703389997545421055448446772873107600067743511801443460271605848448351737928105113018326604000891649405489271556830280784821613543959348820661766867027005600000");
	c = integer("643302438689756040474522480696933847996893589923510883598001734920030816012547447592129969002415580277249465571226522238376206741602961096728177692188649939343731946282937206179297689514295865031146835324735300");
	V[1] = OneRootNumber(a,b,c);

   a = integer("37771265704630252360435098562581515327141167764386946701247402637349389295880105717586958531451109982383420879844018869771409107013807916928459738737743748979341845868773839553598901365614479960934164433897181968390213837678287326635609578432545649233334299931735475442610098774781831700595316331973083212844956886835649808151767141773493568242820226633797473092256278355144566459965139920000");
   b = -integer("46112541214805711009886809266669971427904727899340261396928479464230627534552682210211330721150356955821757197481592240313314537857994600036601048670138170984132166542107741816162929745455439021546390620146188694833960645827326175924160298633399757575986349581563484768056109906074440000");
   c = integer("643302438689756040474522480696933847996893589923510883598001734920030816012547447592129969002415580277249465571226522238376206741602961096728177692188649939343731946282937206179297689514295865031146835324735300");
   V[2] = OneRootNumber(a,b,c);

   P[2]= polynomial<real>(V);

   return polynomial<polynomial<real> >(P);

 }

polynomial<polynomial<real> > getSecondCurve()
{
   array<real> V(3);
   integer a,b,c;
   array<polynomial<real> > P(3);
  
   a = integer("10627867062622561840648658475507351125512825293361397610581380520854108976738654334283679137058811131946689822274559391501312153902647056471290082472406850325421971196760670294654472260338728406541585025446917930698450152564613166166021712710544323293068720810651756662790327946811073407254742687090506910510104723826008091132266920429080129178017331477060715236103793492413952765222254282840290927972403656416491682597067373411823288236185854241213218641098238620622283850321709723366579197301104020596537302648538148478738476330");
	b = integer("13246593172958917102763298417479609326665194365834210129203503946213197176649320697129079984603740352363148305126760597659458686314162110539356264325278960429398615479666067038692866770291745935488528169726159049869811560355989070541905618311151642553128653101397398660589406473596111115645984660228940181220549924303212946033580518510939919919589286910084491569481740312881008172469995445965277694987453038689378440777472205");
	c = integer("643302438689756040474522480696933847996893589923510883598001734920030816012547447592129969002415580277249465571226522238376206741602961096728177692188649939343731946282937206179297689514295865031146835324735300");
   V[0] = OneRootNumber(a,b,c);
   
   a = integer("1184962477317563974349089142744986668213560516977859898726490887485431571141644555080279549427034464464728601362217706508377070850099262744042500835060088850710834672180105144997409421301475397637764872397170299370424667467526954490218429854137545730502987280446926921276880820975571413380532094133533739581646157360839750572616738530446970811652579577164938628975644571357448333563166701290311359189526585352210594039403581172247044917288701020773791663346024041395742404757452");
   b = integer("1480899780963608826893652189029185541878046923527004625213851029680906213337815877738015993288251727127532166774495063082444487700561964460844155590657506701592584373306847395576228155714301524138000574239412650765407818664628396878460627655374933319283293230595270509053366571242897840976112686677974169611159651125137261348162463924699154451235729566066742524051807560790");
   c = integer("643302438689756040474522480696933847996893589923510883598001734920030816012547447592129969002415580277249465571226522238376206741602961096728177692188649939343731946282937206179297689514295865031146835324735300");
   V[1] = OneRootNumber(a,b,c);
   
   a = integer("19330673266453486731338701997437731084057824970997885186865965662675141583987821102918518803187963353546493247675652858487213142650615645709318692164131288434812434742701540598314496281017893471874966165949461637269347341971444918253385540296557855274782458132125412283159488667303959665798746022593240546990936070845274140560311557907324058003610555430094443233308040538952388689653232875140112215786499818409380380066340922");
   b = integer("23509189024961798512374487400241653925110474152036044755402054735759845981323827959751742975171191111592317720493840280214694033553262567293188961472471786386093033279307495380353768118626550126470169975282871119947708458285779813013986246016242054506988657625467761440095281384413760723003143007134930461051343915556461");
   c = integer("643302438689756040474522480696933847996893589923510883598001734920030816012547447592129969002415580277249465571226522238376206741602961096728177692188649939343731946282937206179297689514295865031146835324735300");
   V[2] = OneRootNumber(a,b,c);

   P[0]= polynomial<real>(V);
	
   a = -integer("56108382052555079538495112897314707680204061448961493535778594481466366342213573848831590702157709721941953249669770449956369010568125808537059132192512167472618324327302606932940064505652891054856781937982479532845465215762466484865486841015534419271867009171817553038959882077046963048458603670607845439121259616088773143165422538500831520501602882186351383157376233732956595552890980558991307448330603260290141826149895079217282474966284638730563974842480244538779163458440489902998324709143879180190786491535231944455179782862010704810179280754467244080000449981547972749370600");
	b = -integer("70101318944954614358100843212188418101690063681704849554749812546932697944439493541823796332325968683683193026609954698263470365664362089197452754207526943722789384111783715614832862704568314758406957218386764140554772667562265988924201553360902600643587007727351506484689504562552624526169058335124507742940162633397168085906710186309896632786760144319133126473146900109553299372805936020790391342718858948295353885135503885342278017433563520344407696536791481729031883649300");
	c = integer("643302438689756040474522480696933847996893589923510883598001734920030816012547447592129969002415580277249465571226522238376206741602961096728177692188649939343731946282937206179297689514295865031146835324735300");
   V[0] = OneRootNumber(a,b,c);

   a = -integer("699703732029378487611674736018456791924191688408084178854260306100499338230537386019859426751497419113477310483322269867834762277126223803300387099808813623625589934964998371813476970249754890341733411142849069149408611654311340369190337873249038147730117670574289815710428954856304936978156384594640156974329235909089088301364918348024579724373542535720086586267292162312359104034072521540892628999388547991667438807207611644277967477934393434091720876318003212876156429882072236932205330454264521828658111309759240505060231640");
   b = -integer("850951597547113635880112531433190160497777948989493218929724193266683220957712287360374474644373361545757024770056081331638940084826778097146606645542546102491254034482678854164546525649151995175956334485608861494339622846313874275340163835531094655626880489627660103034558319887083331472598292049918727756427313722422889654980338664414017789376038397451063325696350178865028250407136262462564194051404089158654086789435820");
   c = integer("643302438689756040474522480696933847996893589923510883598001734920030816012547447592129969002415580277249465571226522238376206741602961096728177692188649939343731946282937206179297689514295865031146835324735300");
   V[1] = OneRootNumber(a,b,c);

   a = integer("98232932411719807030069689459880423630870868325508192025578690959015668677120848791805692268390052838064244758050766240523387588448237029816583282773290676631952414629322604494746815097085164676348087049057052765258820214416103093952750589890754862351561851279897550121253528515162575977719172468485198237602280119069641041377792460647828367916678600231618279885601174786012423548937924661123630659620734851002492911976017646258291448343815010235951417583227716729432076304248");
   b = integer("159262922378941210360246496740953632111223650531362604904139440834623677135919105572726778349628578856923265566918881339443102701327963185397773613939298491054202210884263479246584308857470580542924749214033572882581527712115256619451193062440769636620086587997971529537678309525038194873455805208168177561827934449145472521126558477147036340062579336190506109135498882188");
	c = integer("643302438689756040474522480696933847996893589923510883598001734920030816012547447592129969002415580277249465571226522238376206741602961096728177692188649939343731946282937206179297689514295865031146835324735300");
	V[2] = OneRootNumber(a,b,c);

	P[1]= polynomial<real>(V);
	
	a = -integer("52293128450929031393731294329024498447885527375308690349968114065536548774705917864993470142484458496969647215305596730132287480215439127035960779481135352408023868775332607659937503881846284904170097225389720174906388524785551875261767273434689474625157156858030705637207202886259804854992823934201430435985431602742854763852026389998254532613539094367539504982355931040143111756727664046990537458099370214138533410205936074888478422185030011549739808581491648604065798405149258818479058963001547024853596363803147059434978367047831130817199588974415145865496046698601749043604468329745773500128761433703377150630155817808635759000");
	b = -integer("63596804131646536814768107309840572648050659581617143768393412451609311001528255341663777339355210957745558814156045772485264938420193006499175977657899859587678127528432365432923511327386228044708266593461316569535383205844681743229614832448395780373740171330606964725964909184709371049794325210831029544782563444430763175958747486780498449117894519510131790051211645184616145547790193242524358802720676181383120920183198271514568503977556964517722272038743374604271558798599366756996674763495734284912941709917310347984879500");
	c = integer("643302438689756040474522480696933847996893589923510883598001734920030816012547447592129969002415580277249465571226522238376206741602961096728177692188649939343731946282937206179297689514295865031146835324735300");
	V[0] = OneRootNumber(a,b,c);

	a = -integer("4013037290145005924265994052280979159402762109756366186487337191967559759390677307033837927374424782258526673540599337213090635579754095411622714134026834457425787562056144055644519649473851835094677077297045313009893934539372272258592840598580159896583897731809080691512412608334032931143673224012210176095544487000274306605208470189184224098964482153590850943530216452392530121030705236106995228500077538212413079867619365232893034978889469481275528422740288910204151475907657327576570369046512731192384176481879387245888296864200845943815426686279031435366607585128249764204400");
	b = -integer("6745051397593297904462321603403884064454200281610583982515393306186701936441909310000226470130124963813715832370778870726396975812754387303853504350592575156916512450834811564437522457190259458167808148527114922504500284148360258311416239118430647631997679590757880256225460648209131391613921572298932353744472825424136833428713799232871849376950485650033925870460388788046915844330352378635752518042098782421881606960995069757425951438669021672823274282138228909281390466200");
	c = integer("643302438689756040474522480696933847996893589923510883598001734920030816012547447592129969002415580277249465571226522238376206741602961096728177692188649939343731946282937206179297689514295865031146835324735300");
    V[1]= OneRootNumber(a,b,c);
	
	a = integer("264280865075607809350596922496609264483808421897076050527015067990247130063191104904754355243744206487722781311164341207406924453936326383367812182020268394657920443401789142750771385194319140690919707119999136651238193465920451712501726836054096131734778397701443792163355499090601707870020073573594370309681936677530162789068999668906164267760640020397709997652571085042988909251417602273777308006673755510808959232621912055074944799069890938025724601388999095756152977387355300534948474019454008268881988990222223934197808080");
    b = 0;
	c = integer("643302438689756040474522480696933847996893589923510883598001734920030816012547447592129969002415580277249465571226522238376206741602961096728177692188649939343731946282937206179297689514295865031146835324735300");

	V[2]= OneRootNumber(a,b,c);

   P[2]= polynomial<real>(V);

   return polynomial<polynomial<real> >(P);

}

int findOnlyZeroElement(const array<real>& R)
{
  const int n = R.size();
  int intersect;
  int prec = DOUBLE_PREC;
  bool* isolated = new bool[n];
  bool* possible_intersect = new bool[n];
  bigfloat* L = new bigfloat[n];
  bigfloat* U = new bigfloat[n];

  for(int i=0; i<n; i++) isolated[i] = false;

  do
  {
     intersect = 0;
     int i;
     for(i=0; i<n; i++) possible_intersect[i] = false;

     // get interval bounds
	 int I= -1;
     for(i=0; i<n; i++)
     {
        if(!isolated[i])
        {
           L[i] = R[i].get_lower_bound();
           U[i] = R[i].get_upper_bound();
		   if(sign(L[i]) <= 0 && sign(U[i]) >= 0) 
		   {
			   I = i;
			   possible_intersect[i] = true;
			   intersect++;
		   }
		   else isolated[i] = true;
        }
     }

     if(intersect == 1) {
       delete[] isolated; delete[] possible_intersect; delete[] L; delete[] U;
       return I;
     }
     prec *= 2;
     for(i=0; i<n; i++) 
     {
        if(!isolated[i]) (R[i]).improve_approximation_to(prec);
     }
  } while(intersect > 1);
  
  // this should never be reached (?)
  return -1;
}

int main()
{
  cout << "\nStart program real_test.\n";
  
  cout << "sign test in Voronoi example: ";

  {

  cout << "0 " << flush;

  real a1= 15,a2= 21,b1= -19, b2= -a2*b1/a1;
  real F,G,SQR;

  assert((a1*b2+a2*b1).sign() == 0);

  SQR= sqrt( (a1*a1+b1*b1)*(a2*a2+b2*b2) );
  F= real(2)*(SQR-a1*a2+b1*b2);
  G= real(2)*(SQR+a1*a2-b1*b2);

  assert ((G.sign() == 1) && (F.sign() == 0));

  }


  {

  cout << "1 " << flush;

  real d = sqrt(2.0);

  real a_1=0,b_1= 1,c_1=  d,
       a_2=0,b_2=-1,c_2=  d,
       a_3=1,b_3= 0,c_3= -2*d;

  int sign_x=1; int sign_y=1;

  real A = a_1*c_2+a_2*c_1; // fr"uher K
  real B = b_1*c_2+b_2*c_1; // fr"uher I

  real C = 2*c_1*c_2; 

  real D = a_1*a_2-b_1*b_2;
  real S = a_1*b_2+a_2*b_1;

  real RN = sqrt( (a_1*a_1+b_1*b_1)*(a_2*a_2 + b_2*b_2) );

  real sqr1 = sqrt(C*(RN + D));
  real sqr2 = sqrt(C*(RN - D));

  real x_v = A + sign_x*sqr1;
  real y_v = B + sign_y*sqr2;
  real z_v = RN - (a_1*a_2+b_1*b_2);

  real P = a_3*x_v+b_3*y_v+c_3*z_v;

  real R = P*P - (a_3*a_3+b_3*b_3)*(x_v*x_v+y_v*y_v);

  R.compute_with_precision(60);
  R.improve_approximation_to(100);

  assert(R.sign() == 0);

  }

  {

  cout << "2 " << flush;

  real a_1=-12,b_1= -7,c_1=  23,
       a_2=2,b_2=-3,c_2=  9,
       a_3=14,b_3= 10,c_3= 5;

  real A = a_1*c_2+a_2*c_1; // fr"uher K
  real B = b_1*c_2+b_2*c_1; // fr"uher I

  real C = 2*c_1*c_2; 

  real D = a_1*a_2-b_1*b_2;

  real RN = sqrt( (a_1*a_1+b_1*b_1)*(a_2*a_2 + b_2*b_2) );

  real sqr1 = sqrt(C*(RN + D));
  real sqr2 = sqrt(C*(RN - D));

  real T = abs(a_1)*b_2+abs(a_2)*b_1;
  real S = a_1*b_2+a_2*b_1;

  int sign_x = T.sign();
  int sign_y = sign_x*S.sign();

  real x_v = A + sign_x*sqr1;
  real y_v = B + sign_y*sqr2;
  real z_v = RN - (a_1*a_2+b_1*b_2);

  real P = (a_3*x_v+b_3*y_v)+c_3*z_v;
  real D3_sq = a_3*a_3+b_3*b_3;
  real R_sq = x_v*x_v+y_v*y_v;

  real R = P*P - D3_sq*R_sq;

  assert(R.sign() != 0);

  }

  {

  cout << "3 " << flush;

  real a_1=-12,b_1= -7,c_1=  23,
       a_2=2,b_2=-3,c_2=  9,
       a_3=14,b_3= 10,c_3= 5;

  real A = a_1*c_2+a_2*c_1; // fr"uher K
  real B = b_1*c_2+b_2*c_1; // fr"uher I

  real C = 2*c_1*c_2; 

  real D = a_1*a_2-b_1*b_2;

  real RN = sqrt( (a_1*a_1+b_1*b_1)*(a_2*a_2 + b_2*b_2) );

  real sqr1 = sqrt(C*(RN + D));
  real sqr2 = sqrt(C*(RN - D));

  real T = abs(a_1)*b_2+abs(a_2)*b_1;
  real S = a_1*b_2+a_2*b_1;

  int sign_x = T.sign();
  int sign_y = sign_x*S.sign();

  real x_v = A + sign_x*sqr1;
  real y_v = B + sign_y*sqr2;
  real z_v = RN - (a_1*a_2+b_1*b_2);

  real P = (a_3*x_v+b_3*y_v)+c_3*z_v;
  real D3_sq = a_3*a_3+b_3*b_3;
  real R_sq = x_v*x_v+y_v*y_v;

  real R = P*P - D3_sq*R_sq;

  assert(R.sign() != 0);

  }

  cout << " ... done.\n ";


  
  {

  cout << "equality test with Taylor expansion:\n" << flush;

  int k = 20;
  int i,j;
  real *euler1 = new real[k+2];
  real *euler2 = new real[k+2];
  real fraction;
  real one = 1;

  cout << "i = ";
  for (i=1; i <= k; i++)
  {
    cout << i << " " << flush;
    euler1[i] = euler2[i] = one;
    j = i;
    fraction = 1;
    while (j > 0)
    {
      fraction *= real(j);
      euler1[i] = euler1[i]*one + fraction;
      euler2[i] = euler2[i]*one/real(j) + one;
      j--;
    }
    euler1[i] = euler1[i] / fraction;
    assert (euler1[i] == euler2[i]);
  }

  cout << " ... done.\n";

  cout << "exactness test with Taylor expansion:" << flush;

  euler1[20] = one;
  j = k;
  fraction = 1;
  while (j > 0)
  {
    fraction *= real(j);
    euler1[20] = euler1[20]*one + fraction;
    j--;
  }
  euler1[20].improve_approximation_to(1000);
  assert (isZero(euler1[20].get_bigfloat_error())); 

  delete[] euler1; delete[] euler2;

  cout << " ... done.\n";

  }


  
  {

  cout << "various tests with Newtonian iteration for sqrt: \n" << flush;

  real  result;
  real  it;           // iterator in Newton iteration
  real& ne = result;  // next iteration value in Newton iteration
  real  diff;

  bigfloat sqrt2;

  int prec = 53;
  cout << "prec = ";
  while (prec < 1000)
  {
    cout << prec << " " << flush;
    ne = sqrt(2.0);
    do {  
      it=ne; 
      ne = (it*it + 2)/(2*it); 
    }
    while (abs(ne-it) >= ipow2(-prec-1));

    sqrt2 = sqrt(bigfloat(2.0),prec+1);
    assert(abs(result - sqrt2) < ipow2(-prec));

    result.compute_with_precision(53);
    result.improve_approximation_to(prec+1);
    assert(abs(to_bigfloat(result)-sqrt2) < ipow2(-prec));
   
    result.compute_with_precision(prec+2);
    assert(abs(to_bigfloat(result)-sqrt2) < ipow2(-prec));

    prec*=2;
  }

  cout << " ... done.\n";

  }


  
  cout << "test for automatic zero detection: " << flush;

  {

  int m;
  real sum=0;
  for (m=1;m<=50;m++) 
  { sum = sum + (2*sqrt(real(2))-sqrt(real(8))); 
  } 
  assert(sum.sign() == 0);

  }

  {

  real y=0, x=0;
  for (int ij = 2; ij<= 13; ij++)
  {
    x += ij*sqrt(real(ij));
    y = x-x;
    assert(y.sign() == 0);
  }

  }

  cout << " ... done.\n";


  
    
    {

    cout << "test by Olivier: " << flush;
     
    real a11 =  (double)  6576833001171515.0;
    real a21 =  (double)  4645552482121323.0;
    real a12 =  (double) -4901643281669312.0;
    real a22 =  (double) -3462280570234346.0;
      
    assert((a11*a22-a12*a21).sign() == 1);

    a11 = 40000000000000.0; a12 = a11+1; a21 = a11+2; a22 = a11+3;
     
    assert((a11*a22-a12*a21).sign() == -1); 

    cout << " ... done.\n";

    }

    
    {

    cout << "test by Stefan Lutter: " << flush;

    real H = 3*sqrt(real(2))/sqrt(real(20));
    real I = (sqrt(real(8)) + sqrt(real(2)))/(2*sqrt(real(5)));
    assert((H-I).sign() == 0);

    cout << " ... done.\n";

    }


    
    { 

    cout << "test by Kurt: " << flush;

    integer a = 1;
    real b,w,z;

    while (a.length() <= 50)
    { 
      a = 2*a;
      if (a.length()>=3) {
        b = a;
        w = (sqrt(b+2) - sqrt(b))*(sqrt(b+1) + sqrt(b)) - 1;
        z = (sqrt(b+1) - sqrt(b))*(sqrt(b+1) + sqrt(b)) - 1;
        assert(w.sign() != 0); 
        assert(z.sign() == 0); 
      }
    }

    }

    { // again, for running time control:


    int K;
    int s;
    integer Ran;
    real b, sqr_b, sqr_b_inc, w;

    cout << "k = ";
    for (K=1;K<=3000;K*=2)
    {
      cout << K << " ";
      Ran = integer::random(K);

      sqr_b = sqrt(b);
      sqr_b_inc = sqrt(b+1);
      w = (sqr_b_inc - sqr_b)*(sqr_b_inc + sqr_b);
      s = (w-1).sign();
    }

    }

    cout << " ... done.\n";




  
  {
    real one = 1, two = 2, three = 3, four = 4, five = 5, six = 6, seven = 7, 
         nine = 9, twelve = 12, twenty = 20, twenty_five = 25, twenty_nine = 29;
    real root_two = sqrt(two); 
    real root_three = sqrt(three);
    real root_five = sqrt(five);
    real root_six = sqrt(six);
    real root_seven = sqrt(seven);
    real third_root_two = root(two,3);
    real third_root_three = root(three,3);
    real third_root_four = root(four,3);
    real third_root_five = root(five,3);
    real third_root_nine = root(nine,3);
    real third_root_twenty = root(twenty,3);
    real third_root_twenty_five = root(twenty_five,3);
    real root_twenty_nine = sqrt(twenty_nine);
    real fifth_root_three = root(three,5);
    real fifth_root_five = root(five,5);
   
    real test;
    
    test = sqrt(9+4*root_two)-(1+2*root_two);
    assert (sign(test) == 0);

    test = sqrt(5+2*root_six) + sqrt(5-2*root_six) - 2*sqrt(three);
    assert(sign(test) == 0);
    // Zippel 

    test = sqrt(16-2*root_twenty_nine+2*sqrt(55-10*root_twenty_nine))
         - (sqrt(22+2*root_five)-sqrt(11+2*root_twenty_nine) + root_five);
    assert(sign(test) == 0);
    // Shanks 

    test = sqrt((112+70*root_two)+(46+34*root_two)*root_five)
         - (5+4*root_two) - (3+root_two)*root_five;
    assert(sign(test) == 0);
    // Borodin

    test = sqrt(3+root_two)*sqrt(6+root_seven)-(3+root_two+root_seven);
    assert(sign(test) != 0);
    // Bloemer: is not degenerate ;-)


    // ----------------------------------------------------------------------

   

    test = 3*sqrt(third_root_five-third_root_four)
           -third_root_two-third_root_twenty+third_root_twenty_five;
    assert(sign(test) == 0);
    // Ramanujan first test like in the appendix of J. Bloemers thesis
    // deg = 2*3^5 = 486

    test =  root(nine*(seven*third_root_twenty-19),6) 
           -third_root_five + root(two,3);
    assert(sign(test) == 0);

    // Ramanujan second test like in the appendix of J. Bloemers thesis
    // but division-free
    // deg = 3*6*3*3 = 2*3^5 = 162 

    test = root(root_five+2,3)-root(root_five-2,3)-1;
    assert(sign(test) == 0);
    // Landau test from SIAM Journal on Computing 19992, p. 96.
    // deg = 2*3*3 = 18

    test = sqrt(3+2*root_three)-one/four*root(twelve,4)*(2+sqrt(twelve));
    assert(sign(test) == 0);
    // Borodin 1 from Journal of Symbolic Computation 1985, 196ff.
    // deg = 2*2*4*2 = 2^5 = 32

    test = sqrt(4+3*root_two) - root(two,4)*(1+root_two);
    assert(sign(test) == 0);
    // Borodin 2 from Journal of Symbolic Computation 1985, 196ff.
    // deg = 2*2*4 = 16

    // ------------------------------------------------------------------------

    test = root(third_root_two-1,3) -one/third_root_nine +
           root(two,3)/third_root_nine-sqr(third_root_two)/third_root_nine;
    
    // Ramanujan third test like in the appendix of J. Bloemers thesis
    // with divisions
    assert(sign(test) == 0);
    // deg = 3*3*3*3 = 3^4 = 81

    test =  root(seven*root(real(20),3)-19,6) 
           -third_root_five/third_root_three + third_root_two/third_root_three;
    assert(sign(test) == 0);

    // Ramanujan second test like in the appendix of J. Bloemers thesis
    // with divisions
    // deg = 3*3*6*3*3 = 2*3^5 = 486 

    test = root(two/fifth_root_five
           -fifth_root_three*fifth_root_three*fifth_root_three/fifth_root_five,3)
           -(1+fifth_root_three-sqr(fifth_root_three))/sqr(fifth_root_five);
    assert(sign(test) == 0);
    // Zippel (or Ramanujan?) 
    // deg = 3^2 * 5*5 = 225

    test = root(three/fifth_root_five
           -fifth_root_three*fifth_root_three*fifth_root_three/fifth_root_five,3)
           -(1+fifth_root_three-sqr(fifth_root_three))/sqr(fifth_root_five);
    assert(sign(test) != 0);
    // Zippel expression, perturbed

  }

  
  
  {
    cout << "diamond: easy example";

    LEDA_VECTOR<real> A(4);
    A[0] = real(-3); 
    A[1] = real(0); 
    A[2] = real(0); 
    A[3] = real(1);
    polynomial<real> P(A);

    real a;

    a = diamond(1,P);
    a.compute_with_precision(10);
    real b = a - root(real(3), 3);
    
    assert(sign(a) == 1);
    assert(sign(b) == 0);
    cout << " ... done.\n";
  }

  {
    cout << "diamond: more complicated example";

    // A question of Elmar: 
    // Is the 2. real root of 34*x^4+42*x^3+18*x^2-14*x+1 
    // equal to the sum of the 2. real root of 544*x^4-224*x^3+80*x^2-62 
    // and the 1. real root of 544*x^4+896*x^3+160*x^2-280*x-82?

    LEDA_VECTOR<real> VP(5);
    VP[0] = real(1);
    VP[1] = real(-14);
    VP[2] = real(18);
    VP[3] = real(42);
    VP[4] = real(34);
    polynomial<real> P(VP);

    LEDA_VECTOR<real> VQ(5);
    VQ[0] = real(-62);
    VQ[1] = real(0);
    VQ[2] = real(80);
    VQ[3] = real(-224);
    VQ[4] = real(544);
    polynomial<real> Q(VQ);

    LEDA_VECTOR<real> VR(5);
    VR[0] = real(-82);
    VR[1] = real(-280);
    VR[2] = real(160);
    VR[3] = real(896);
    VR[4] = real(544);
    polynomial<real> R(VR);

    assert(sign(diamond(2,P)-diamond(2,Q)-diamond(1,R))==0);
    
    cout << " ... done.\n";
  }


  {
	  // Error found by Michael Hemmer, October 2005: The conversion from integer did go wrong for 
	  // < 5.0 LEDA version in EXT. I assume that this does never occur in LEDA. However, here is the test.
	  cout << "Conversion test";

      integer n = integer("62117712335628326622204893835759363235357184506749519887567992841889782061320804487295703846682655215423326770900505928485665109725778801607209628776080625757645812972809628437636322256446484315813236298005791865961334231724186516020603267814363081399030078488415519439566306108509997247053480644614012262714414547810113913487252480840188116118056316086891007144313165278685076264812882618812142674432909248663191552240");
      real r = real(n);
	  cout << " ... done.\n";
  }
  {
	  // Error found by Michael Hemmer, September 2005: The error bound computation for sqrt was wrong.
	  // I assume that this is not the only thing which does go wrong here. But this test now works.
	  cout << "Diamond with large coefficients test";

	  polynomial<real> delta = generateDelta();
	  polynomial<real> xpol = generatexPol();

	  integer Nenner = integer("3533694129556768659166595001485837031654967793751237916243212402585239552");
	  rational l = rational(-2655, Nenner);
	  Nenner = integer("1766847064778384329583297500742918515827483896875618958121606201292619776");
	  rational r = rational(-1327,Nenner);

	  real x = diamond(l,r,xpol);
	  real deltax = delta.evaluate(x);
	  real wurzel = sqrt(deltax);
 
	  assert(sign(wurzel) == 1);
	  cout << " ... done. \n";
  }
  {
	  // Error found by Michael Hemmer, November 2005: The error computation of
	  // NEGATION was wrong

	  cout << "Find only Zero Element test";

	polynomial<real> poly = getFirstPolynomial();
	real root = getFirstExample(poly);
	real x = poly.evaluate(root);
	assert(sign(x) == 0);  // this was wrong

	polynomial<polynomial<real> > curve1 = getFirstCurve();
	polynomial<polynomial<real> > curve2 = getSecondCurve();

	polynomial<real> slice1 = curve1.evaluate(root);
	polynomial<real> slice2 = curve2.evaluate(root);


	real s1Lower = diamond(1,slice1);
	real s1Upper = diamond(2,slice1);
	real s2Lower = diamond(1,slice2);
	real s2Upper = diamond(2,slice2);


	array<real> candidates(2);
	candidates[0] = slice2.evaluate(s1Lower);
	candidates[1] = slice2.evaluate(s1Upper);


	assert(findOnlyZeroElement(candidates)== 1);

	array<real> cand(4);
	cand[0] = s1Lower - s2Lower;
	cand[1] = s1Lower - s2Upper;
	cand[2] = s1Upper - s2Lower;
	cand[3] = s1Upper - s2Upper;

	assert(findOnlyZeroElement(cand)== 3);

	  cout << " ... done. \n";
  }

  cout << "...all tests successfully completed!\n";
  cout << "Time: " << used_time() << endl;

  return 0;
}

